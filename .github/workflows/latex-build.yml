name: 📄 LaTeX Build & Release

on:
  push:
    branches: [ main ]
    paths: [ '**.tex', '**.cls', '**.sty' ]
  pull_request:
    branches: [ main ]
    paths: [ '**.tex', '**.cls', '**.sty' ]
  release:
    types: [ published ]

env:
  MAIN_FILE: main.tex
  OUTPUT_FILE: main.pdf

jobs:
  build-latex:
    name: 🔨 Build LaTeX Document
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
      
    - name: 📦 Setup TeX Live
      uses: teatimeguest/setup-texlive-action@v3
      with:
        packages: >-
          scheme-full
          xelatex
          fontspec
          polyglossia
          longtable
          booktabs
          xcolor
          listings
          fancyvrb
          enumitem
          titlesec
          caption
          subcaption
          hyperref
          bookmark
          microtype
          
    - name: 🔍 Validate LaTeX Syntax
      run: |
        echo "🔍 Checking LaTeX syntax..."
        # Check for common LaTeX errors
        if grep -r "\\usepackage\[demo\]" .; then
          echo "❌ Found [demo] option in graphicx package"
          exit 1
        fi
        
        if grep -r "customlongtable" .; then
          echo "❌ Found non-standard customlongtable environment"  
          exit 1
        fi
        
        # Check for malformed \textbf commands
        if grep -r "extbf{" --include="*.tex" .; then
          echo "❌ Found malformed \\textbf command (missing backslash)"
          exit 1
        fi
        
        # Check for unbalanced itemize/enumerate environments  
        for file in $(find . -name "*.tex"); do
          begin_itemize=$(grep -c "\\\\begin{itemize}" "$file" || true)
          end_itemize=$(grep -c "\\\\end{itemize}" "$file" || true)
          if [ "$begin_itemize" -ne "$end_itemize" ]; then
            echo "❌ Unbalanced itemize environment in $file"
            exit 1
          fi
        done
        
        echo "✅ LaTeX syntax validation passed"
        
    - name: 🏗️ Compile LaTeX (First Pass)
      run: |
        echo "🏗️ First XeLaTeX compilation..."
        xelatex -interaction=nonstopmode -halt-on-error ${{ env.MAIN_FILE }}
        
    - name: 🏗️ Compile LaTeX (Second Pass) 
      run: |
        echo "🏗️ Second XeLaTeX compilation (for references)..."
        xelatex -interaction=nonstopmode -halt-on-error ${{ env.MAIN_FILE }}
        
    - name: 📊 Check PDF Quality
      run: |
        echo "📊 Checking PDF quality..."
        if [ ! -f "${{ env.OUTPUT_FILE }}" ]; then
          echo "❌ PDF file was not generated"
          exit 1
        fi
        
        # Check file size (should be reasonable)
        size=$(stat -f%z "${{ env.OUTPUT_FILE }}" 2>/dev/null || stat -c%s "${{ env.OUTPUT_FILE }}")
        echo "📄 PDF Size: $(($size / 1024))KB"
        
        if [ $size -gt 10485760 ]; then  # 10MB limit
          echo "⚠️ Warning: PDF size is quite large (>10MB)"
        fi
        
        if [ $size -lt 100000 ]; then   # 100KB minimum
          echo "❌ Error: PDF seems too small, might be corrupted"
          exit 1
        fi
        
        echo "✅ PDF quality check passed"
        
    - name: 📤 Upload PDF Artifact
      uses: actions/upload-artifact@v4
      with:
        name: compiled-pdf-${{ github.sha }}
        path: ${{ env.OUTPUT_FILE }}
        retention-days: 30
        
    - name: 🏷️ Upload Release Asset (on release)
      if: github.event_name == 'release'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ${{ env.OUTPUT_FILE }}
        asset_name: Siber-Guvenlik-Rehberi-${{ github.event.release.tag_name }}.pdf
        asset_content_type: application/pdf

  latex-linting:
    name: 🔍 LaTeX Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
      
    - name: 🧹 LaTeX Linting
      run: |
        echo "🧹 Running LaTeX quality checks..."
        
        # Check for trailing whitespace
        if grep -r "[[:space:]]$" --include="*.tex" .; then
          echo "⚠️ Warning: Found trailing whitespace in .tex files"
        fi
        
        # Check for TODO/FIXME comments
        if grep -ri "TODO\|FIXME\|XXX" --include="*.tex" .; then
          echo "📋 Found TODO/FIXME comments (review needed)"
        fi
        
        # Check for consistent encoding
        file --mime-encoding *.tex data/*.tex | grep -v "utf-8" && {
          echo "❌ Non-UTF-8 encoding found, please convert files to UTF-8"
          exit 1
        } || echo "✅ All files are UTF-8 encoded"
        
        # Check for long lines (>100 chars)
        long_lines=$(awk 'length > 100 {count++} END {print count+0}' *.tex data/*.tex)
        if [ "$long_lines" -gt 50 ]; then
          echo "⚠️ Warning: $long_lines lines exceed 100 characters"
        fi
        
        echo "✅ LaTeX linting completed"

  spell-check:
    name: 📝 Turkish Spell Check
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
      
    - name: 📦 Install Spell Checker
      run: |
        sudo apt-get update
        sudo apt-get install -y aspell aspell-tr hunspell hunspell-tr
        
    - name: 📝 Spell Check Turkish Content
      run: |
        echo "📝 Running Turkish spell check..."
        
        # Extract text content from LaTeX files for spell checking
        for file in *.tex data/*.tex; do
          if [ -f "$file" ]; then
            echo "Checking: $file"
            # Remove LaTeX commands and check spelling
            sed -e 's/\\[a-zA-Z*]*{[^}]*}//g' \
                -e 's/\\[a-zA-Z*]*\[[^\]]*\]//g' \
                -e 's/\\[a-zA-Z]*//g' \
                -e 's/%.*$//' \
                "$file" | \
            aspell --lang=tr --mode=tex list | \
            sort | uniq -c | sort -nr | head -20 || true
          fi
        done
        
        echo "📝 Spell check completed (review any suspicious words above)"

  security-check:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
      
    - name: 🔒 Security Scan
      run: |
        echo "🔒 Running security checks..."
        
        # Check for sensitive information
        if grep -ri "password\|secret\|token\|key" --include="*.tex" --include="*.md" .; then
          echo "⚠️ Warning: Potential sensitive information found"
        fi
        
        # Check for suspicious URLs
        if grep -ri "http://[^/]*\." --include="*.tex" --include="*.md" .; then
          echo "⚠️ Warning: Found HTTP URLs (consider HTTPS)"
        fi
        
        echo "✅ Security scan completed"

  generate-stats:
    name: 📊 Generate Statistics
    runs-on: ubuntu-latest
    needs: build-latex
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
      
    - name: 📊 Calculate Project Statistics  
      run: |
        echo "📊 Generating project statistics..."
        
        # Count lines, words, files
        echo "### 📈 Project Statistics" >> stats.md
        echo "Generated on: $(date)" >> stats.md
        echo "" >> stats.md
        
        # File counts
        tex_files=$(find . -name "*.tex" | wc -l)
        md_files=$(find . -name "*.md" | wc -l)  
        img_files=$(find img/ -type f 2>/dev/null | wc -l || echo "0")
        
        echo "| Metric | Count |" >> stats.md
        echo "|--------|-------|" >> stats.md
        echo "| LaTeX Files | $tex_files |" >> stats.md
        echo "| Markdown Files | $md_files |" >> stats.md  
        echo "| Images | $img_files |" >> stats.md
        
        # Line counts
        tex_lines=$(find . -name "*.tex" -exec wc -l {} + | tail -1 | awk '{print $1}')
        echo "| Total LaTeX Lines | $tex_lines |" >> stats.md
        
        # Word count (approximate, LaTeX content)
        words=$(find . -name "*.tex" -exec cat {} + | \
                sed 's/\\[a-zA-Z*]*{[^}]*}//g' | \
                sed 's/\\[a-zA-Z*]*//g' | \
                wc -w)
        echo "| Estimated Words | $words |" >> stats.md
        
        # Sections count  
        sections=$(grep -r "\\\\section{" --include="*.tex" | wc -l)
        subsections=$(grep -r "\\\\subsection{" --include="*.tex" | wc -l)
        echo "| Sections | $sections |" >> stats.md
        echo "| Subsections | $subsections |" >> stats.md
        
        echo "" >> stats.md
        echo "Build commit: ${{ github.sha }}" >> stats.md
        
        cat stats.md
        
    - name: 📤 Upload Statistics
      uses: actions/upload-artifact@v4
      with:
        name: project-statistics-${{ github.sha }}
        path: stats.md
        retention-days: 30